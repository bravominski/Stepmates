<nav class="navbar navbar-default">
  <div class="navbar-header">
    <a class="navbar-brand" href="/">
      Stepmates
    </a>
  </div>
  <button class="btn btn-default navbar-btn navbar-right" style="margin-right: 30px">
    <%= link_to 'Log Out', logout_path %>
  </button>
</nav>

<!--Present data for specific patient-->
<p id="notice"><%= notice %></p>

<div class="container col-md-12"  onload="myFunction()">
<h1>Patient Data for <%= @patient.name%></h1>
  <form>
    Type your query in YYYYMMDD for daily, and YYYYMM for monthly:<br />
    <input type="text" id="dateQuery"><br />
  </form><br />
  <button onclick="selectedMonth()">
    See month
  </button>
  <button onclick="selectedDay()">
    See day
  </button>
  <script type="text/javascript">
   var globalDay = "01";
    function selectedMonth() {
      var e = document.getElementById("dateQuery");
      var date = e.value;
      var year = date.substring(0, 4);
      var month = date.substring(4, 6);
      refresh_month_graph(year, month);
    }

    function selectedDay() {
      var e = document.getElementById("dateQuery");
      var date = e.value;
      var year = date.substring(0, 4);
      var month = date.substring(4, 6);
      globalDay = date.substring(6, 8);
      refresh_day_graph(year, month, globalDay);
    }
  </script>
  <div id="chart-title"></div>
  <div id="chart">
  </div>
  <script>
      //Width and height
      var w = 1000;
      var h = 500;
      var barPadding = 4;

      //create SVG element
      var svg = d3.select("#chart")
                  .append("svg")
                  .attr("width", w + 45)
                  .attr("height", h + 20);

      var titleSVG = d3.select("#chart-title")
                        .append("svg")
                        .attr("width", 1000)
                        .attr("height", 50);

      function fill_month_graph(dataSet) {
        svg.selectAll("*").remove();
        titleSVG.selectAll("*").remove();

        var days = 0;
        var dateInInt = dataSet[0].date;
        var date = dateInInt.toString();
        var month = date.substring(4, 6);
        
        titleSVG.append("text")
        .attr("font-family", "sans-serif")
        .attr("font-size", "30px")
        .attr("fill", "black")
        .attr("text-anchor", "middle")
        .attr("x", 500)
        .attr("y", 30)
        .text("Monthly Data for " + date.substring(0, 4) + "/" + month);

        if (month == "01" || month == "03"
          || month == "05" || month == "07" 
          || month == "08" || month == "10" 
          || month == "12") {
          days = 31;
        }
        else if (month == "04" || month == "06"
          || month == "09" || month == "11") {
          days = 30;
        }
        else { 
          days = 28;
        }


        for (var i = 0; i < days; i++) {
          svg.append("text")
          .attr("x", function() {
          return i * (w/31) + 14 + 45;
          })
          .attr("y", function() {
            return h + 13;
          })
          .attr("font-family", "sans-serif")
          .attr("font-size", "12px")
          .attr("fill", "black")
          .attr("text-anchor", "middle")
          .text(function() {
            if (i < 10) {
              return "0" + i.toString();
            }
            else return i.toString();
          })
        }

        for (var i = 1; i <= 20; i++) {
          svg.append("text")
          .attr("x", function() {
          return 20;
          })
          .attr("font-family", "sans-serif")
          .attr("font-size", "12px")
          .attr("fill", "black")
          .attr("text-anchor", "middle")
          .text(function() {
            return (i*1000).toString();
          })
          .attr("y", function() {
            return h - (h/20) * i + 13;
          });

          svg.append("line")
          .attr("x1", 40)
          .attr("x2", w + 40)
          .attr("y1", function() {
            return h - (h/15) * i + 9;
          })
          .attr("y2", function() {
            return h - (h/15) * i + 9;
          })
          .style("stroke", "black")
          .style("stroke-opacity", 0.1);

        }


        for (var i = 0; i < dataSet.length; i++) {
          svg.append("rect")
          .attr("x", function() {
          return i * (w/31) + 45;
          })
          .attr("y", function() {
            var ret = 0;
            var summary = dataSet[i].summary;
            if (summary == null) {
              return 0;
            }
            for (var j = 0; j < summary.length; j++) {
              var element = summary[j];
              if (element.activity == 'walking' || element.activity == 'running') {
                ret = ret + element.steps;
              }
            }
            return (h - ret/25);
          })
          .attr("width", ((w/31) - (barPadding)))
          .attr("height", function(){
            var ret = 0;
            var summary = dataSet[i].summary;
            if (summary == null) {
              return 0;
            }
            for (var j = 0; j < summary.length; j++) {
              var element = summary[j];
              if (element.activity == 'walking' || element.activity == 'running') {
                ret = ret + element.steps;
              }
            }
            return ret/25;
          })
          .attr("fill", "#2ecc71");
        }


      }


      function fill_day_graph(dataSet) {
        svg.selectAll("*").remove();
        titleSVG.selectAll("*").remove();

        var days = 0;
        var dateInInt = dataSet[globalDay - 1].date;
        var date = dateInInt.toString();
        var month = date.substring(4, 6);


        titleSVG.append("text")
        .attr("font-family", "sans-serif")
        .attr("font-size", "30px")
        .attr("fill", "black")
        .attr("text-anchor", "middle")
        .attr("x", 500)
        .attr("y", 30)
        .text("Daily Data for " + date.substring(0, 4) + "/" + month + "/" + globalDay );


        for (var i = 0; i <= 24; i++) {
          svg.append("text")
          .attr("x", function() {
          return i * (w/24) + 45;
          })
          .attr("y", function() {
            return h + 13;
          })
          .attr("font-family", "sans-serif")
          .attr("font-size", "12px")
          .attr("fill", "black")
          .attr("text-anchor", "middle")
          .text(function() {
            if (i < 10) {
              return "0" + i.toString();
            }
            else return i.toString();
          })
        }

        for (var i = 1; i <= 20; i++) {
          svg.append("text")
          .attr("x", function() {
          return 20;
          })
          .attr("font-family", "sans-serif")
          .attr("font-size", "12px")
          .attr("fill", "black")
          .attr("text-anchor", "middle")
          .text(function() {
            return (i*50).toString();
          })
          .attr("y", function() {
            return h - (h/20) * i + 13;
          });

          svg.append("line")
          .attr("x1", 40)
          .attr("x2", w + 40)
          .attr("y1", function() {
            return h - (h/20) * i + 9;
          })
          .attr("y2", function() {
            return h - (h/20) * i + 9;
          })
          .style("stroke", "black")
          .style("stroke-opacity", 0.1);

        }

        var segments = dataSet[globalDay - 1].segments;
        for (var i = 0; i < segments.length; i++) {
          if (segments[i].type == "move") {
            var activities = segments[i].activities;
            for (var j = 0; j < activities.length; j++) {
              if (activities[j].activity == "walking" || activities[j].activities == "running") {
                  var activity = activities[j];
                  var startTime = activity.startTime.substring(9, 13);
                  var duration = activity.duration;
                  var steps = activity.steps;

                  svg.append("rect")
                  .attr("x", function() {
                    console.log(startTime);
                    return ((startTime/2400) * w + 45) - ((duration/(3600*24)) * w)/2;
                  })
                  .attr("y", function() {
                    return h - ((steps/1020) * h);
                  })
                  .attr("width", function() {
                    return (duration/(3600*24)) * w;
                  })
                  .attr("height", function() {
                    return ((steps/1020) * h);
                  })
                  .attr("fill", function() {
                    if ((steps/(duration/60)) > 100 && duration > 600) {
                      return "red";
                    }
                    return "#2ecc71";
                  });

                  svg.append("text")
                  .attr("font-family", "sans-serif")
                  .attr("font-size", "12px")
                  .attr("fill", "black")
                  .attr("text-anchor", "middle")
                  .text(steps + " steps")
                  .attr("x", function() {
                    return ((startTime/2400) * w + 45) - ((duration/(3600*24)) * w)/2;
                  })
                  .attr("y", function() {
                    var retVal = h - ((steps/1020) * h);
                    console.log(retVal);
                    if (retVal < 0) return 10;
                    return h - ((steps/1020) * h);
                  });

                  svg.append("text")
                  .attr("font-family", "sans-serif")
                  .attr("font-size", "12px")
                  .attr("fill", "black")
                  .attr("text-anchor", "middle")
                  .text(Math.round(duration / 60 * 10) / 10 + " min")
                  .attr("x", function() {
                    return ((startTime/2400) * w + 45) - ((duration/(3600*24)) * w)/2;
                  })
                  .attr("y", function() {
                    var retVal = h - ((steps/1020) * h);
                    console.log(retVal);
                    if (retVal < 0) return 10 + 20;
                    return h - ((steps/1020) * h) + 10;
                  });
              }
            }
          }
        }
      }

  </script>
  <table style="width:700px">
    <tr>
      <th scope="col">Name</th>
      <th scope="col">MRN</th>
      <th scope="col">Date of Birth</th>
      <th scope="col">Email</th>
      <th scope="col"></th>
    </tr>
    <tr>
      <th scope="row" class="spec"><%= @patient.name %></th>
      <td class="col-md-2"><%= @patient.mrn %></td>
      <td class="col-md-2"><%= @patient.dob %></td>
      <td class="col-md-3"><%= @patient.email %></td>
      <td class="col-md-2"><%= link_to 'Email Patient', custom_email_patient_path(@patient) %></td>
    </tr>
  </table>

  <div style="width:0px; height:0px; color:white; font-size: 0px" id="access_token"><%= @patient.access_token %></div>
  <div style="width:0px; height:0px; color:white; font-size: 0px" id="refresh_token"><%= @patient.refresh_token %></div>
  <button class="btn btn-default">
    <%= link_to 'Edit', edit_patient_path(@patient) %>
  </button>
  <button class="btn btn-default">
    <%= link_to 'Back', patients_path %>
  </button>
</div>
  <script>
    function refresh_month_graph(y, m) {

      $.ajax({
        url: "/getMonthData",
        type: "POST",
        dataType: "json",
        data: {month: m, year: y, access_token: $("#access_token").html(),
        refresh_token: $("#refresh_token").html()},
        success: function(data) {
          fill_month_graph(data);
        }
      });
    }

    function refresh_day_graph(y, m, d) {

      $.ajax({
        url: "/getDayData",
        type: "POST",
        dataType: "json",
        data: {month: m, year: y, day: d, access_token: $("#access_token").html(),
        refresh_token: $("#refresh_token").html()},
        success: function(data) {
          fill_day_graph(data);

        }
      });
    }
    refresh_day_graph(2015, 05, 01);
  </script>
